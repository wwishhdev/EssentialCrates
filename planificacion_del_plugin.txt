Planificación EssentialCrates

Información General
Nombre: EssentialCrates
Versión inicial: 1.0.0
Java: 8
IDE: IntelliJ IDEA
Build System: Maven
Almacenamiento: YAML y MySQL
Target: Servidores HCF/KitMap

Estructura del Proyecto

EssentialCrates/
├── src/main/java/com/wishh/essentialcrates/
│   ├── EssentialCrates.java
│   ├── commands/
│   │   └── CrateCommand.java
│   ├── listeners/
│   │   └── CrateListener.java
│   ├── managers/
│   │   ├── CrateManager.java
│   │   └── DataManager.java
│   ├── models/
│   │   ├── Crate.java
│   │   └── Reward.java
│   └── utils/
       └── ConfigUtil.java

Fases de Desarrollo
Fase 1: Core del Plugin

Sistema Base

Clase principal con eventos básicos
Sistema de configuración YAML
Sistema de mensajes
Registro de comandos
Sistema de Almacenamiento

Implementación YAML
Implementación MySQL
Sistema de migración
Caché básico

Fase 2: Funcionalidades Principales

Sistema de Crates

Creación/eliminación de crates
Sistema de llaves físicas
Menú de preview
Gestión de inventario
Sistema de Recompensas

Comandos como recompensas
Items como recompensas
Sistema de porcentajes
Preview de items

Fase 3: Optimización

Mejoras de Rendimiento

Sistema de caché
Limpieza de memoria
Optimización de eventos

Pulido Final

Mensajes configurables
Efectos básicos
Testing y debugging
Archivos de Configuración

Comandos

/crate help - Muestra la ayuda
/crate give <jugador> <crate> [cantidad] - Da llaves
/crate create <nombre> - Crea una crate
/crate delete <nombre> - Elimina una crate
/crate reload - Recarga la configuración

Permisos

essentialcrates.admin - Acceso a todos los comandos
essentialcrates.give - Dar llaves
essentialcrates.create - Crear crates
essentialcrates.delete - Eliminar crates
essentialcrates.reload - Recargar configuración

Características Principales

Sistema simple y eficiente
Almacenamiento dual (YAML/MySQL)
Sistema de llaves físicas
Preview de recompensas
Totalmente configurable
Optimizado para HCF/KitMap

Notas Adicionales

Mantener código limpio y documentado
Seguir convenciones de nombres Java
Usar Lombok para reducir boilerplate
Implementar sistema de logs básico
Manejar errores apropiadamente
Incluir mensajes de debug en modo desarrollo